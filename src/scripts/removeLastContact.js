import { PATH_DB } from '../constants/contacts.js';
import * as fs from 'node:fs/promises';
export const removeLastContact = async () => {
    let contacts = [];
    try {
        const data = await fs.readFile(PATH_DB, 'utf-8');
        contacts = JSON.parse(data);
        if (contacts.length > 0) {
            contacts.pop();
        }
    } catch (error) {
        if (error.code !== 'ENOENT') {
            throw error;
        }
    }

    try {
        await fs.writeFile(PATH_DB, JSON.stringify(contacts, null, 2), 'utf-8');
    } catch (error) {
        console.error('Error writing to file:', error);
        throw error;
    }
};

removeLastContact();

// Чтобы реализовать функцию removeLastContact в файле src/scripts/removeLastContact.js, которая будет удалять последний контакт из массива, если в массиве есть хотя бы один элемент, следует выполнить следующие шаги:

// Алгоритм:
// Импортировать необходимые модули:

// Импортируйте модуль fs из Node.js для работы с файловой системой. Используйте версию с промисами (fs.promises), чтобы упростить работу с асинхронным кодом.
// Определить путь к файлу:

// Определите константу для пути к файлу src/db/db.json.
// Чтение файла:

// Создайте функцию, которая будет асинхронно читать содержимое файла db.json с помощью fs.readFile.
// Парсинг содержимого файла:

// Преобразуйте прочитанное содержимое из JSON-строки в JavaScript-объект с помощью JSON.parse.
// Проверка и получение контактов:

// Убедитесь, что прочитанные данные представляют собой массив контактов.
// Если данные не являются массивом, обработайте это (например, выбросьте ошибку).
// Проверка наличия элементов в массиве:

// Проверьте, есть ли в массиве хотя бы один элемент.
// Удаление последнего элемента:

// Если массив не пустой, удалите последний элемент из массива, используя метод pop.
// Запись изменений в файл:

// Преобразуйте изменённый массив обратно в JSON-строку с помощью JSON.stringify.
// Асинхронно запишите эту строку в файл db.json с помощью fs.writeFile.
// Обработка ошибок:

// Добавьте обработку ошибок для случаев, когда файл не существует или данные некорректны.

// Пошаговое описание:
// Импортируйте модуль fs с промисами:

// Импортировать fs для работы с файловой системой.
// Определите путь к файлу:

// Установить константу для пути к файлу db.json.
// Создайте асинхронную функцию removeLastContact:

// Функция будет асинхронной для выполнения операций чтения и записи файлов.
// Внутри функции removeLastContact, прочитайте файл:

// Прочитать содержимое файла db.json.
// Преобразуйте содержимое файла в объект:

// Преобразовать JSON-строку в JavaScript-объект.
// Проверьте, что прочитанные данные являются массивом:

// Убедиться, что данные являются массивом контактов.
// Проверьте наличие элементов в массиве:

// Если массив не пустой, удалить последний элемент с помощью pop.
// Преобразуйте изменённый массив обратно в JSON-строку:

// Использовать JSON.stringify для преобразования массива обратно в строку JSON.
// Запишите JSON-строку в файл db.json:

// Асинхронно записать изменённый массив в файл db.json.
// Добавьте обработку ошибок:

// Использовать try...catch блок для обработки ошибок чтения и записи файлов.
// Таким образом, функция removeLastContact будет выглядеть следующим образом (без кода):

// Импортировать fs с промисами.
// Определить путь к файлу db.json.
// Создать асинхронную функцию removeLastContact.
// Прочитать файл db.json.
// Преобразовать содержимое файла в объект.
// Проверить, что данные являются массивом.
// Проверить наличие элементов в массиве.
// Удалить последний элемент массива, если он не пустой.
// Преобразовать изменённый массив обратно в JSON-строку.
// Асинхронно записать изменённый массив в файл db.json.
// Обработать возможные ошибки.
