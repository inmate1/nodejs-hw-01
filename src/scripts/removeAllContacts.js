import { PATH_DB } from '../constants/contacts.js';
import * as fs from 'fs/promises';
export const removeAllContacts = async () => {
  let contacts = [];
  try {
    const data = await fs.readFile(PATH_DB, 'utf-8');
    contacts = JSON.parse(data);
    if (!Array.isArray(contacts)) {
      throw new Error('Data is not an array');
    }
         contacts = [];
  } catch (error) {
    if (error.code !== 'ENOENT') {
      throw error;
    }

  }
  try {
    await fs.writeFile(PATH_DB, JSON.stringify(contacts, null, 2), 'utf-8');
  } catch (error) {
    console.error('Error writing to file:', error);
    throw error;
  }
};

removeAllContacts();

// Чтобы реализовать функцию removeAllContacts в файле src/scripts/removeAllContacts.js, которая будет удалять все контакты из массива в файле src/db/db.json, следует выполнить следующие шаги:

// Алгоритм:
// Импортировать необходимые модули:

// Импортируйте модуль fs из Node.js для работы с файловой системой. Используйте версию с промисами (fs.promises), чтобы упростить работу с асинхронным кодом.
// Определить путь к файлу:

// Определите константу для пути к файлу src/db/db.json.
// Чтение файла:

// Создайте функцию, которая будет асинхронно читать содержимое файла db.json с помощью fs.readFile.
// Парсинг содержимого файла:

// Преобразуйте прочитанное содержимое из JSON-строки в JavaScript-объект с помощью JSON.parse.
// Проверка и получение контактов:

// Убедитесь, что прочитанные данные представляют собой массив контактов.
// Удаление всех контактов:

// Присвойте пустой массив переменной, содержащей контакты.
// Запись изменений в файл:

// Преобразуйте пустой массив обратно в JSON-строку с помощью JSON.stringify.
// Асинхронно запишите эту строку в файл db.json с помощью fs.writeFile.
// Обработка ошибок:

// Добавьте обработку ошибок для случаев, когда файл не существует или данные некорректны.
// Пошаговое описание:
// Импортируйте модуль fs с промисами:

// Импортировать fs для работы с файловой системой.
// Определите путь к файлу:

// Установить константу для пути к файлу db.json.
// Создайте асинхронную функцию removeAllContacts:

// Функция будет асинхронной для выполнения операций чтения и записи файлов.
// Внутри функции removeAllContacts, прочитайте файл:

// Прочитать содержимое файла db.json.
// Преобразуйте содержимое файла в объект:

// Преобразовать JSON-строку в JavaScript-объект.
// Проверьте, что прочитанные данные являются массивом:

// Убедиться, что данные являются массивом контактов.
// Удалите все контакты:

// Присвоить пустой массив переменной контактов.
// Преобразуйте пустой массив обратно в JSON-строку:

// Использовать JSON.stringify для преобразования пустого массива обратно в строку JSON.
// Запишите пустую JSON-строку в файл db.json:

// Асинхронно записать пустую JSON-строку в файл db.json.
// Добавьте обработку ошибок:

// Использовать try...catch блок для обработки ошибок чтения и записи файлов.
// Таким образом, функция removeAllContacts будет выглядеть следующим образом (без кода):

// Импортировать fs с промисами.
// Определить путь к файлу db.json.
// Создать асинхронную функцию removeAllContacts.
// Прочитать файл db.json.
// Преобразовать содержимое файла в объект.
// Проверить, что данные являются массивом.
// Присвоить переменной пустой массив.
// Преобразовать пустой массив обратно в JSON-строку.
// Асинхронно записать пустую JSON-строку в файл db.json.
// Обработать возможные ошибки.
